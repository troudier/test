variables:
  phpVersion: 7.4
  COMPOSER_CACHE_DIR: $(Pipeline.Workspace)/.composer
  SYMFONY_VENDOR_DIR: $(Build.SourcesDirectory)/vendor
#  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  hasDeploy: $[or(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq(variables['Build.SourceBranch'], 'refs/heads/develop') )]


trigger:
  branches:
    include:
    - develop
    - releases/*
    - feature/*
  tags:
    include:
    - '*'
    
pool:
  vmImage: ubuntu-latest
     
stages:
- stage: Prepare
  jobs:
  - job: "ComposerInstall"
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - script: |
          sudo update-alternatives --set php /usr/bin/php$(phpVersion)
          sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
          sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
          sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
          sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
          php -version
        displayName: 'Use PHP version $(phpVersion)'
        
      - script: ls -l $(Build.SourcesDirectory)
        displayName: show workspace dir content 
    
      - task: Cache@2
        inputs:
          key: 'composer | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            composer | "$(Agent.OS)" | "$(Build.SourceBranch)"
            composer | "$(Agent.OS)"
            composer
          path: $(COMPOSER_CACHE_DIR)
        displayName: Cache composer  
          
      - task: Cache@2
        inputs:
          key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
            vendor | "$(Agent.OS)"
            vendor
          path: $(SYMFONY_VENDOR_DIR)
        displayName: Cache vendors
          
      - script: composer install --no-interaction --prefer-dist --no-scripts
        displayName: 'composer install'
        
- stage: QA
  jobs:
  - job: PhpUnit
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
    - script: |
        sudo update-alternatives --set php /usr/bin/php$(phpVersion)
        sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
        sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
        sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
        sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
        php -version
      displayName: 'Use PHP version $(phpVersion)'
      
    - task: Cache@2
      inputs:
        key: 'composer | "$(Agent.OS)" | phpUnit | "$(Build.SourceBranch)" | composer.lock'
        restoreKeys: |
          composer | "$(Agent.OS)" | phpUnit | "$(Build.SourceBranch)"
          composer | "$(Agent.OS)" | phpUnit
          composer | "$(Agent.OS)"
          composer
        path: $(COMPOSER_CACHE_DIR)
      displayName: Cache composer
      
    - task: Cache@2
      inputs:
        key: 'vendor | "$(Agent.OS)" | phpUnit | "$(Build.SourceBranch)" | composer.lock'
        restoreKeys: |
          vendor | "$(Agent.OS)" | phpUnit | "$(Build.SourceBranch)"
          vendor | "$(Agent.OS)" | phpUnit
          vendor | "$(Agent.OS)"
          vendor
        path: $(SYMFONY_VENDOR_DIR)
      displayName: Cache vendors
      
    - script: composer require --no-scripts --dev phpunit/phpunit symfony/test-pack
      displayName: install phpUnit
    
    - script: php ./vendor/bin/phpunit
      env:
        XDEBUG_MODE: coverage
      displayName: execute tests
      
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit' 
#   Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: build/phpunit/index.xml
        publishRunAttachments: true
        
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: build/phpunit/coverage-cobertura.xml
        reportDirectory: build/phpunit/coverage
        pathToSources: src/
      
  - job: Phpmd
    container: jakzal/phpqa:php$(phpVersion)
    steps:
      - task: Cache@2
        inputs:
          key: 'composer | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            composer | "$(Agent.OS)" | "$(Build.SourceBranch)"
            composer | "$(Agent.OS)"
            composer
          path: $(COMPOSER_CACHE_DIR)
        displayName: Cache composer  
          
      - task: Cache@2
        inputs:
          key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
            vendor | "$(Agent.OS)"
            vendor
          path: $(SYMFONY_VENDOR_DIR)
        displayName: Cache vendors
     
      - script: phpmd src text phpmd.xml --exclude 'tests/*,vendor/*,src/Entity/*' --reportfile build/phpmd/phpmd-report.txt --ignore-violations-on-exit
        displayName: phpmd - text
        
      - script: phpmd src xml phpmd.xml --exclude 'tests/*,vendor/*,src/Entity/*' --reportfile build/phpmd/phpmd-report.xml
        displayName: phpmd - report
        
        
      - task: PublishBuildArtifacts@1
        displayName: Publish Artifact
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: build/phpmd/
          artifactName: PhpmdReport
      
  - job: Phploc
    container: jakzal/phpqa:php$(phpVersion)
    steps:
      - task: Cache@2
        inputs:
          key: 'composer | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            composer | "$(Agent.OS)" | "$(Build.SourceBranch)"
            composer | "$(Agent.OS)"
            composer
          path: $(COMPOSER_CACHE_DIR)
        displayName: Cache composer  
          
      - task: Cache@2
        inputs:
          key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
            vendor | "$(Agent.OS)"
            vendor
          path: $(SYMFONY_VENDOR_DIR)
        displayName: Cache vendors
     
      - script: mkdir -p build/phploc
        displayName: create report dir
        
      - script: phploc src tests --log-xml=build/phploc/phploc.xml --count-tests >> build/phploc/phploc.txt
        displayName: phploc   
     
      - task: PublishBuildArtifacts@1
        displayName: Publish Artifact
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: build/phploc
          artifactName: PhplocReport
          
  - job: Phpcs
    container: jakzal/phpqa:php$(phpVersion)
    steps:
      - task: Cache@2
        inputs:
          key: 'composer | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            composer | "$(Agent.OS)" | "$(Build.SourceBranch)"
            composer | "$(Agent.OS)"
            composer
          path: $(COMPOSER_CACHE_DIR)
        displayName: Cache composer  
          
      - task: Cache@2
        inputs:
          key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
            vendor | "$(Agent.OS)"
            vendor
          path: $(SYMFONY_VENDOR_DIR)
        displayName: Cache vendors
     
      - script: mkdir -p build/phpcs
        displayName: create report dir
        
      - script: phpcs
        displayName: phpcs 
        
      - task: PublishBuildArtifacts@1
        displayName: Publish Artifact
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: build/phpcs
          artifactName: PhpcsReport
      
      
  - job: Php_cs_fixer
    container: jakzal/phpqa:php$(phpVersion)
    steps:
      - task: Cache@2
        inputs:
          key: 'composer | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            composer | "$(Agent.OS)" | "$(Build.SourceBranch)"
            composer | "$(Agent.OS)"
            composer
          path: $(COMPOSER_CACHE_DIR)
        displayName: Cache composer  
          
      - task: Cache@2
        inputs:
          key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
            vendor | "$(Agent.OS)"
            vendor
          path: $(SYMFONY_VENDOR_DIR)
        displayName: Cache vendors
     
      - script: mkdir -p build/php-cs-fixer
        displayName: create report dir
        
      - script: php-cs-fixer fix --verbose --dry-run --allow-risky=yes --no-interaction >> build/php-cs-fixer/php-cs-fixer.txt
        displayName: php-cs-fixer 
        
      - task: PublishBuildArtifacts@1
        displayName: Publish Artifact
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: build/php-cs-fixer
          artifactName: Php-cs-fixerReport
      
    
  - job: localPhpSecurityChecker
    container: jakzal/phpqa:php$(phpVersion)
    steps:
      - task: Cache@2
        inputs:
          key: 'composer | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            composer | "$(Agent.OS)" | "$(Build.SourceBranch)"
            composer | "$(Agent.OS)"
            composer
          path: $(COMPOSER_CACHE_DIR)
        displayName: Cache composer  
          
      - task: Cache@2
        inputs:
          key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
            vendor | "$(Agent.OS)"
            vendor
          path: $(SYMFONY_VENDOR_DIR)
        displayName: Cache vendors
     
      - script: mkdir -p build/local-php-security-checker
        displayName: create report dir
        
      - script: local-php-security-checker >> build/local-php-security-checker/local-php-security-checker.txt
        displayName: local-php-security-checker 
        
      - task: PublishBuildArtifacts@1
        displayName: Publish Artifact
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: build/local-php-security-checker
          artifactName: local-php-security-checkerReport
          
  - job: phpcpd
    container: jakzal/phpqa:php$(phpVersion)
    steps:
      - task: Cache@2
        inputs:
          key: 'composer | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            composer | "$(Agent.OS)" | "$(Build.SourceBranch)"
            composer | "$(Agent.OS)"
            composer
          path: $(COMPOSER_CACHE_DIR)
        displayName: Cache composer  
          
      - task: Cache@2
        inputs:
          key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
          restoreKeys: |
            vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
            vendor | "$(Agent.OS)"
            vendor
          path: $(SYMFONY_VENDOR_DIR)
        displayName: Cache vendors
     
      - script: mkdir -p build/phpcpd
        displayName: create report dir
        
      - script: phpcpd src --exclude src/Entity >> build/phpcpd/phpcpd.txt
        displayName: phpcpd 
        
      - task: PublishBuildArtifacts@1
        displayName: Publish Artifact
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: build/phpcpd
          artifactName: phpcpdReport

- stage: Package
  dependsOn: QA
  condition: and(succeeded(), eq(variables.hasDeploy, true))
  jobs:
  
  
  - job: ZipPackage
    steps:
    - task: Cache@2
      inputs:
        key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)" | composer.lock'
        restoreKeys: |
          vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
          vendor | "$(Agent.OS)"
          vendor
        path: $(SYMFONY_VENDOR_DIR)
      displayName: Cache vendors
    
    - script: ls -la $(build.artifactstagingdirectory)
      displayName: show artifactstagingdirectory
      
    - script: ls -la $(System.DefaultWorkingDirectory)
      displayName: show DefaultWorkingDirectory
      
    - task: ArchiveFiles@1
      displayName: Archive files
      inputs:
        rootFolder: $(System.DefaultWorkingDirectory)
        includeRootFolder: false
        archiveType: default
        archiveFile: $(build.artifactstagingdirectory)/$(build.Repository.Name)-build
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      inputs:
        PathtoPublish: $(build.artifactstagingdirectory)
        artifactName: $(build.Repository.Name)-build
  
    - script: echo Hi!
      
  - job: DockerPackage
    steps:
    - script: echo Hello, world!
      displayName: 'Run a one-line script'

    - script: |
        echo Add other tasks to build, test, and deploy your project.
        echo See https://aka.ms/yaml
      displayName: 'Run a multi-line script'
      
  - job: HelmPackage
    steps:
    - script: echo Hello, world!
      displayName: 'Run a one-line script'

    - script: |
        echo Add other tasks to build, test, and deploy your project.
        echo See https://aka.ms/yaml
      displayName: 'Run a multi-line script'
