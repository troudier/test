
variables:
  COMPOSER_CACHE_DIR: $(Pipeline.Workspace)/.composer
  SYMFONY_VENDOR_DIR: $(Build.SourcesDirectory)/vendor
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  hasDeploy: $[or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/develop') )]


trigger:
  branches:
    include:
    - master
    - develop
    - releases/*
    - feature/*
    
pool:
  vmImage: ubuntu-latest
    
    
stages:
- stage: Prepare
  jobs:
  - job: "ComposerInstall"
    steps:
      - script: ls -l $(Build.SourcesDirectory)
        displayName: show workspace dir content 
    
      - task: Cache@2
        inputs:
          key: 'composer | "$(Agent.OS)" | composer.lock'
          restoreKeys: |
            composer | "$(Agent.OS)"
            composer
          path: $(COMPOSER_CACHE_DIR)
        displayName: Cache composer  
          
      - task: Cache@2
        inputs:
          key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"'
          restoreKeys: |
            vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
            vendor | "$(Agent.OS)"
            vendor
#          restoreKeys: 'vendor | vendor/**'
          path: $(SYMFONY_VENDOR_DIR)
        displayName: Cache vendors
          
      - script: composer install
        displayName: install composer dependencies
        
- stage: QA
  jobs:
  - job: PhpUnit
    steps:
    - task: Cache@2
      inputs:
        key: 'composer | "$(Agent.OS)" | composer.lock'
        restoreKeys: |
          composer | "$(Agent.OS)" | phpUnit
          composer | "$(Agent.OS)"
          composer
        path: $(COMPOSER_CACHE_DIR)
      displayName: Cache composer
      
    - task: Cache@2
      inputs:
        key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"'
        restoreKeys: |
          vendor | "$(Agent.OS)" | phpUnit | "$(Build.SourceBranch)"
          vendor | "$(Agent.OS)" | phpUnit
          vendor | "$(Agent.OS)"
          vendor
        path: $(SYMFONY_VENDOR_DIR)
      displayName: Cache vendors
      
    - script: composer require --dev phpunit/phpunit symfony/test-pack
      displayName: install phpUnit
    
    - script: php ./vendor/bin/phpunit
      env:
        XDEBUG_MODE: coverage
      displayName: execute tests
      
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit' 
#   Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: build/phpunit/index.xml
        publishRunAttachments: true
        
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: build/phpunit/coverage-cobertura.xml
      
  - job: Phpmd
    container: jakzal/phpqa:latest
    steps:
    - task: Cache@2
      inputs:
        key: 'composer | "$(Agent.OS)" | composer.lock'
        restoreKeys: |
          composer | "$(Agent.OS)"
          composer
        path: $(COMPOSER_CACHE_DIR)
      displayName: Cache composer
      
    - task: Cache@2
      inputs:
        key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"'
        restoreKeys: |
          vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
          vendor | "$(Agent.OS)"
          vendor
        path: $(SYMFONY_VENDOR_DIR)
      displayName: Cache vendors
     
      
    - script: phpmd src xml phpmd.xml 
      displayName: phpmd
      
  - job: Phploc
    container: jakzal/phpqa:latest
    steps:
    - task: Cache@2
      inputs:
        key: 'composer | "$(Agent.OS)" | composer.lock'
        restoreKeys: |
          composer | "$(Agent.OS)"
          composer
        path: $(COMPOSER_CACHE_DIR)
      displayName: Cache composer
      
    - task: Cache@2
      inputs:
        key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"'
        restoreKeys: |
          vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
          vendor | "$(Agent.OS)"
          vendor
        path: $(SYMFONY_VENDOR_DIR)
      displayName: Cache vendors
     
      
    - script: phploc src tests --log-xml=phploc.xml --count-tests 
      displayName: phploc   
      
      
  - job: Phpcs
    container: jakzal/phpqa:latest
    steps:
    - task: Cache@2
      inputs:
        key: 'composer | "$(Agent.OS)" | composer.lock'
        restoreKeys: |
          composer | "$(Agent.OS)"
          composer
        path: $(COMPOSER_CACHE_DIR)
      displayName: Cache composer
      
    - task: Cache@2
      inputs:
        key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"'
        restoreKeys: |
          vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
          vendor | "$(Agent.OS)"
          vendor
        path: $(SYMFONY_VENDOR_DIR)
      displayName: Cache vendors
     
      
    - script: phpcs src
      displayName: phpcs 
      
  - job: Php_cs_fixer
    container: jakzal/phpqa:latest
    steps:
    - task: Cache@2
      inputs:
        key: 'composer | "$(Agent.OS)" | composer.lock'
        restoreKeys: |
          composer | "$(Agent.OS)"
          composer
        path: $(COMPOSER_CACHE_DIR)
      displayName: Cache composer
      
    - task: Cache@2
      inputs:
        key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"'
        restoreKeys: |
          vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
          vendor | "$(Agent.OS)"
          vendor
        path: $(SYMFONY_VENDOR_DIR)
      displayName: Cache vendors
     
      
    - script: php-cs-fixer fix --config=.php-cs-fixer.dist.php --verbose --dry-run --allow-risky=yes --no-interaction --ansi
      displayName: php-cs-fixer 
    
  - job: localPhpSecurityChecker
    container: jakzal/phpqa:latest
    steps:
    - task: Cache@2
      inputs:
        key: 'composer | "$(Agent.OS)" | composer.lock'
        restoreKeys: |
          composer | "$(Agent.OS)"
          composer
        path: $(COMPOSER_CACHE_DIR)
      displayName: Cache composer
      
    - task: Cache@2
      inputs:
        key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"'
        restoreKeys: |
          vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
          vendor | "$(Agent.OS)"
          vendor
        path: $(SYMFONY_VENDOR_DIR)
      displayName: Cache vendors
     
      
    - script: local-php-security-checker
      displayName: local-php-security-checker
      
  - job: phpcpd
    container: jakzal/phpqa:latest
    steps:
    - task: Cache@2
      inputs:
        key: 'composer | "$(Agent.OS)" | composer.lock'
        restoreKeys: |
          composer | "$(Agent.OS)"
          composer
        path: $(COMPOSER_CACHE_DIR)
      displayName: Cache composer
      
    - task: Cache@2
      inputs:
        key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"'
        restoreKeys: |
          vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
          vendor | "$(Agent.OS)"
          vendor
        path: $(SYMFONY_VENDOR_DIR)
      displayName: Cache vendors
     
      
    - script: phpcpd src
      displayName: phpcpd
        
- stage: Package
  dependsOn: QA
  condition: eq(variables.hasDeploy, true)
  jobs:
  
  
  - job: ZipPackage
    steps:
    - task: ArchiveFiles@1
      displayName: Archive files
      inputs:
        rootFolder: $(System.DefaultWorkingDirectory)
        includeRootFolder: false
        archiveType: zip

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      inputs:
        PathtoPublish: $(build.artifactstagingdirectory)
        artifactName: DemoArtifact
      
  - job: DockerPackage
    steps:
    - script: echo Hello, world!
      displayName: 'Run a one-line script'

    - script: |
        echo Add other tasks to build, test, and deploy your project.
        echo See https://aka.ms/yaml
      displayName: 'Run a multi-line script'
      
  - job: HelmPackage
    steps:
    - script: echo Hello, world!
      displayName: 'Run a one-line script'

    - script: |
        echo Add other tasks to build, test, and deploy your project.
        echo See https://aka.ms/yaml
      displayName: 'Run a multi-line script'
      
      
- stage: Deploy
  dependsOn: [Package]
  condition: eq(variables.hasDeploy, true)
  jobs:
  - deployment: deployProd     
    condition: eq(variables.isMain, true)
    pool:
      vmImage: ubuntu-latest
    environment: prod
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Hi!
          
  - deployment: deployTest     
    condition: eq(variables.isMain, false)
    pool:
      vmImage: ubuntu-latest
    environment: test
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Hi!
  - job: notify
    dependsOn: [deployProd, deployTest]
    steps:
    - script: echo notify
      displayName: send notification
      
- stage: FTest
  dependsOn: [Deploy]
  condition: and(eq(variables.hasDeploy, true),eq(variables.isMain, false))
  jobs:
  - job: JmeterTest
    steps:
    - script: echo Hello, world!
      displayName: 'Run a one-line script'

    - script: |
        echo Add other tasks to build, test, and deploy your project.
        echo See https://aka.ms/yaml
      displayName: 'Run a multi-line script'
      
  - job: SomeOtherTest
    steps:
    - script: echo Hello, world!
      displayName: 'Run a one-line script'

    - script: |
        echo Add other tasks to build, test, and deploy your project.
        echo See https://aka.ms/yaml
      displayName: 'Run a multi-line script'
          
  - job: notify
    dependsOn: [JmeterTest, SomeOtherTest]
    steps:
    - script: echo notify
      displayName: send notification    
            
- stage: Document
  dependsOn: [QA]
  condition: eq(variables.hasDeploy, true)  
  jobs:
  - job: Phpdocumentor
    container: jakzal/phpqa:latest
    steps:
    - task: Cache@2
      inputs:
        key: 'composer | "$(Agent.OS)" | composer.lock'
        restoreKeys: |
          composer | "$(Agent.OS)"
          composer
        path: $(COMPOSER_CACHE_DIR)
      displayName: Cache composer
      
    - task: Cache@2
      inputs:
        key: 'vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"'
        restoreKeys: |
          vendor | "$(Agent.OS)" | "$(Build.SourceBranch)"
          vendor | "$(Agent.OS)"
          vendor
        path: $(SYMFONY_VENDOR_DIR)
      displayName: Cache vendors
     
      
    #- script: phpDocumentor
    #  displayName: phpDocumentor  
  
